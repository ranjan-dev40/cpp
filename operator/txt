
01/06/23, 5:39 am - Ranjan: https://www.linkedin.com/posts/manuagrawal2_60-days-dsa-challenge-ugcPost-7069161142979358720-EkYw
02/06/23, 7:41 am - Ranjan: IMG-20230602-WA0001.jpg (file attached)
03/06/23, 9:12 am - Ranjan: IMG-20230603-WA0000.jpg (file attached)
04/06/23, 8:06 am - Ranjan: IMG-20230604-WA0000.jpg (file attached)
04/06/23, 4:14 pm - Ranjan: IMG-20230604-WA0026.jpg (file attached)
06/06/23, 8:42 pm - Ranjan: Dulcoflex for pet kharab
07/06/23, 8:23 pm - Ranjan: IMG-20230607-WA0001.jpg (file attached)
07/06/23, 8:23 pm - Ranjan: IMG-20230607-WA0000.jpg (file attached)
08/06/23, 10:47 am - Ranjan: IMG-20230608-WA0008.jpg (file attached)
08/06/23, 3:10 pm - Ranjan: IMG-20230608-WA0021.jpg (file attached)
16/06/23, 6:34 pm - Ranjan: Banke bihari, radhavallabh, radharaman
17/06/23, 8:54 pm - Ranjan: IMG-20230617-WA0009.jpg (file attached)
17/06/23, 8:55 pm - Ranjan: IMG-20230617-WA0010.jpg (file attached)
22/06/23, 11:04 pm - Ranjan: https://www.linkedin.com/posts/raghav-goyal-3066731bb_chatgpt-ai-chatgpt4-activity-7071729641144614913-lnsZ
25/06/23, 3:02 pm - Ranjan: DOC-20230625-WA0000. (file attached)
10th certificate.pdf
25/06/23, 3:02 pm - Ranjan: DOC-20230625-WA0001. (file attached)
12 certificate.pdf
25/06/23, 3:04 pm - Ranjan: DocScanner Feb 9, 2023 2-54 PM.pdf (file attached)
DocScanner Feb 9, 2023 2-54 PM.pdf
25/06/23, 9:29 pm - Ranjan: IMG-20230625-WA0002.jpg (file attached)
26/06/23, 8:18 am - Ranjan: DOC-20230626-WA0000. (file attached)
secondSemDMC.pdf
26/06/23, 8:19 am - Ranjan: DOC-20230626-WA0001. (file attached)
firstSemDMC.pdf
29/06/23, 3:07 am - Ranjan: https://master--majestic-moonbeam-c4afd9.netlify.app/
29/06/23, 10:10 pm - Ranjan: DOC-20230629-WA0003. (file attached)
Abhishek Ranjan.pdf
30/06/23, 11:08 pm - Ranjan: IMG-20230630-WA0005.jpg (file attached)
02/07/23, 3:09 am - Ranjan: IMG-20230702-WA0000.jpg (file attached)
02/07/23, 8:49 pm - Ranjan: IMG-20230702-WA0006.jpg (file attached)
05/07/23, 5:42 am - Ranjan: 5th July 2023
05/07/23, 11:29 am - Ranjan: IMG-20230705-WA0001.jpg (file attached)
05/07/23, 1:07 pm - Ranjan: IMG-20230705-WA0003.jpg (file attached)
05/07/23, 1:07 pm - Ranjan: IMG-20230705-WA0005.jpg (file attached)
05/07/23, 1:07 pm - Ranjan: IMG-20230705-WA0004.jpg (file attached)
08/07/23, 9:02 am - Ranjan: hooks are function based components..........
09/07/23, 9:52 am - Ranjan: 9th July 2023
10/07/23, 6:45 am - Ranjan: https://main--beamish-tapioca-2b5c93.netlify.app/
10/07/23, 7:09 am - Ranjan: IMG-20230710-WA0000.jpg (file attached)
10/07/23, 7:10 am - Ranjan: IMG-20230710-WA0001.jpg (file attached)
12/07/23, 2:00 am - Ranjan: 11 July 2023
12/07/23, 2:27 am - Ranjan: IMG-20230712-WA0001.jpg (file attached)
12/07/23, 10:04 am - Ranjan: IMG-20230712-WA0002.jpg (file attached)
12/07/23, 11:14 am - Ranjan: BIyYITZUY6GOWNSy
13/07/23, 1:24 am - Ranjan: YMFb1KhHOhKcqYj1
14/07/23, 1:18 am - Ranjan: IMG-20230714-WA0000.jpg (file attached)
14/07/23, 4:23 am - Ranjan: IMG-20230714-WA0001.jpg (file attached)
14/07/23, 4:26 am - Ranjan: And irony is marriages success rate is more than job interview.
14/07/23, 4:33 am - Ranjan: IMG-20230714-WA0002.jpg (file attached)
16/07/23, 8:22 am - Ranjan: IMG-20230716-WA0001.jpg (file attached)
16/07/23, 8:51 am - Ranjan: https://www.linkedin.com/posts/kiran-pitambar-bharambe-332336118_linkedin-ai-computervision-ugcPost-7086166299155865600-1uDE?utm_source=share&utm_medium=member_android
17/07/23, 9:50 am - Ranjan: https://www.linkedin.com/posts/sahebcse_25-remote-hiring-companies-ugcPost-7086537165727268864-KT6D
17/07/23, 9:57 am - Ranjan: https://www.linkedin.com/posts/parasmayur_data-sql-python-activity-7086187336924852224-uWzL?utm_source=share&utm_medium=member_desktop
17/07/23, 12:49 pm - Ranjan: 14 July 2023
18/07/23, 7:27 am - Ranjan: https://www.linkedin.com/posts/isha-dagar_interviewadvice-interviewtips-jobsearch-activity-7086664733658947585-iYP_
22/07/23, 6:50 pm - Ranjan: 22 July 2023
22/07/23, 9:02 pm - Ranjan: Resume _ Abhishek Ranjan _ 22-07-2023.pdf (file attached)
Resume _ Abhishek Ranjan _ 22-07-2023.pdf
23/07/23, 9:03 am - Ranjan: Check out this internship at Yougetplaced Technology Services - https://internshala.com/internship/detail/full-stack-development-work-from-home-job-internship-at-yougetplaced-technology-services1689988785?utm_source=app_share&referral=app_share
23/07/23, 9:28 am - Ranjan: https://www.linkedin.com/posts/activity-7088712364006531072-_Gow?utm_source=share&utm_medium=member_android
24/07/23, 2:03 pm - Ranjan: https://www.linkedin.com/posts/anujgarg204_hiring-front-end-developer-mean-activity-7089158093049085952-plou?utm_source=share&utm_medium=member_android
24/07/23, 5:15 pm - Ranjan: // rfc   ---> react fucntion component
// rfce  -----> react fucntion component export
// rafc ------> react arrow fucntion component 
// rafce ----> react arrow fucntion component export
24/07/23, 6:30 pm - Ranjan: IMG-20230724-WA0000.jpg (file attached)
24/07/23, 6:30 pm - Ranjan: IMG-20230724-WA0001.jpg (file attached)
24/07/23, 6:30 pm - Ranjan: IMG-20230724-WA0002.jpg (file attached)
25/07/23, 12:29 pm - Ranjan: https://www.linkedin.com/posts/kiran-kanwar-r-b7129022a_how-to-email-a-resume-ugcPost-7089423730505871360-NYen?utm_source=share&utm_medium=member_android
25/07/23, 6:20 pm - Ranjan: https://www.linkedin.com/posts/shraddha-bharuka_%3F%3F-%3F%3F%3F%3F%3F%3F%3F%3F%3F-%3F%3F%3F%3F%3F%3F%3F%3F%3F-ugcPost-7088883929750941696-mRk3?utm_source=share&utm_medium=member_desktop
26/07/23, 5:26 pm - Ranjan: https://www.linkedin.com/posts/nancy-agarwall_dsa-sheet-ugcPost-7089825284815814657-qE59?utm_source=share&utm_medium=member_desktop
26/07/23, 9:19 pm - Ranjan: TT.pdf (file attached)
TT.pdf
30/07/23, 2:26 pm - Ranjan: Hello!! 😊
Thanks for visiting Ranjan's profile.
Hope you are doing absolutely fine!!
30/07/23, 2:28 pm - Ranjan: Ranjan can be best described as a MERN Developer . He is a Final Year BE student at UIET, Panjab University  Chandigarh. He is a quick learner with a versatile skill set that includes a sound technical foundation as well as exceptional people skills.
30/07/23, 2:29 pm - Ranjan: Ranjan is driven by his concrete vision for life and giving back to community in every way he can.
31/07/23, 10:42 am - Ranjan: PSlip-Ranjan 7th sem.pdf (file attached)
PSlip-Ranjan 7th sem.pdf
31/07/23, 10:28 pm - Ranjan: // copy constructer
31/07/23, 10:28 pm - Ranjan: Hero(Hero& S){
31/07/23, 10:29 pm - Ranjan: this->health = S.health;  this->level = S.level}
31/07/23, 10:31 pm - Ranjan: // copy constructer

Hero(Hero &  temp){
        this->health = temp->health;
        this->level = temp ->level;
}
31/07/23, 10:35 pm - Ranjan: default copy constructer ----> Shallow Copy karta hai
31/07/23, 10:43 pm - Ranjan: the shallow copy we share the same memory location for two different object.
31/07/23, 10:47 pm - Ranjan: in deep copy function we make different array and then copy the name to object to this array.
31/07/23, 11:20 pm - Ranjan: destructer is used for memory deallocation
31/07/23, 11:24 pm - Ranjan: for static object allocation ----> destructor automatically called
31/07/23, 11:25 pm - Ranjan: for dynamic object allocation you have to call ----> destructor
31/07/23, 11:58 pm - Ranjan: static member of class does not belongs to object it belongs to class
01/08/23, 12:02 am - Ranjan: static function ---> does not need to create object and here no any "this" keyword
01/08/23, 12:03 am - Ranjan: static function only access to static member
01/08/23, 2:12 pm - Ranjan: function is not overload just by changing the return type in class you have change the  signature of a function, to overload a function
01/08/23, 2:12 pm - Ranjan: function overloading means same name se multiple function in a single class
04/08/23, 9:13 am - Ranjan: IMG-20230804-WA0002.jpg (file attached)
08/08/23, 5:32 pm - Ranjan: https://www.linkedin.com/posts/priya-vajpeyi_careers-jobseekers-jobinterviews-activity-7094525195578728448-BWod?utm_source=share&utm_medium=member_android
09/08/23, 12:28 am - Ranjan: IMG-20230809-WA0000.jpg (file attached)
09/08/23, 3:54 am - Ranjan: what am i not suppose to do ?
09/08/23, 4:59 pm - Ranjan: TDB999
11/08/23, 9:24 pm - Ranjan: IMG-20230811-WA0002.jpg (file attached)
12/08/23, 5:19 pm - Ranjan: IMG-20230812-WA0003.jpg (file attached)
12/08/23, 5:45 pm - Ranjan: Resume _ Abhishek Ranjan _ 29-07-2023.pdf (file attached)
Resume _ Abhishek Ranjan _ 29-07-2023.pdf
13/08/23, 12:04 am - Ranjan: 13 August
13/08/23, 4:51 am - Ranjan: MacBook Air deal drops the 15-inch M2
13/08/23, 10:06 pm - Ranjan: def mcculloch_pitts_neuron(inputs, weights, threshold):
    # Calculate the weighted sum of inputs
    weighted_sum = sum(x * w for x, w in zip(inputs, weights))
    
    # Check if the weighted sum is greater than or equal to the threshold
    if weighted_sum >= threshold:
        return 1  # Neuron fires (recognizes the "T")
    else:
        return 0  # Neuron doesn't fire (doesn't recognize the "T")

# Define the pixel values for the 10x10 grid (1 for dark, 0 for light)
pixel_grid = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
]

# Define the weights and threshold for the neuron
weights = [1, 1, 1, 1, 1, 1, 1, 1, 1]  # Weights for the 3x3 region
threshold = 2

# Flatten the pixel grid into a list of inputs for the neuron
inputs = [pixel for row in pixel_grid for pixel in row]

# Use the McCulloch-Pitts neuron to recognize the "T" pattern
result = mcculloch_pitts_neuron(inputs, weights, threshold)

if result == 1:
    print("The neuron recognizes the letter 'T'!")
else:
    print("The neuron does not recognize the letter 'T'.")
16/08/23, 12:57 am - Ranjan: 15 aug
16/08/23, 12:58 am - Ranjan: 16 aug 2023
17/08/23, 8:22 pm - Ranjan: DOC-20230817-WA0002. (file attached)
Shortlisted students for resume screening_UIET (1).xlsx
18/08/23, 2:25 pm - Ranjan: when function props goes to its children component then lifting up state event is occured. In this event we are passing the children state to its parent or it sibling
18/08/23, 2:26 pm - Ranjan: that react feature here context API and Redux comes in picture
18/08/23, 3:21 pm - Ranjan: after rendering a component if we want revoking some functionality  then we use useEffect
18/08/23, 5:57 pm - Ranjan: reducer is a place where its state and management logic stored globally.
18/08/23, 6:04 pm - Ranjan: reducer is a function which is return state
18/08/23, 6:54 pm - Ranjan: here we are using props drilling for some components, to avoid that we are searching a concept like global vriable that provided by Context API, and this phenomena called context
18/08/23, 7:36 pm - Ranjan: its used for config and theme if you use context api in access
18/08/23, 7:37 pm - Ranjan: if there is not props drilling you can use props
18/08/23, 7:38 pm - Ranjan: if use context api in access then developer wouldn't have flexiblity to modify the data.
18/08/23, 7:54 pm - Ranjan: in Next section we learn about context + useReducer which widely use nowdays
18/08/23, 7:54 pm - Ranjan: we  also learn about custom hook
18/08/23, 11:18 pm - Ranjan: when complex functionallity use in frequently then we make the custom hook
19/08/23, 1:14 am - Ranjan: reference doesn't rerender it only store the value
19/08/23, 1:30 am - Ranjan: In React, the useRef hook is a built-in hook that allows you to create a mutable reference to a DOM element
19/08/23, 1:51 am - Ranjan: dependency array in useEffect decided by react
19/08/23, 1:53 am - Ranjan: useEffect cleanup function
19/08/23, 1:58 am - Ranjan: when we do something just after rendering  then we use useEffect hook
19/08/23, 2:21 am - Ranjan: *memoization and callback in REACT*
19/08/23, 2:43 am - Ranjan: memo is only limited to component
19/08/23, 2:51 am - Ranjan: component ko memo se aur property/key handler   ko callback se
20/08/23, 1:53 am - Ranjan: // if we pass 3 argument in this function then nums make array of three element

let m = function(...nums){
    
}
20/08/23, 1:55 am - Ranjan: Above illustration is rest params
20/08/23, 2:00 am - Ranjan: let number = [1,2,3,4]

let m = function(...nums){
    let total = 0;
    for(let n of nums){
        total +=n;
    }
    
    return total;
}

// console.log(m(number));
console.log(m(1,2,3,4))
20/08/23, 2:02 am - Ranjan: let number = [1,2,3,4]

let m = function(x,y, ...nums){
    console.log(y);
    let total = 0;
    for(let n of nums){
        total +=n;
    }
    
    return total;
}

// console.log(m(number));
console.log(m(1,2,3,4))
20/08/23, 2:13 am - Ranjan: class Student{
    constructor(name){
        this.name=name;
    }
    getName(){
        return this.name;
    }
    setName(name){
        return this.name = name;
    }
}

let p1 = new Student("Shipra");
p1.setName("Krishna")
// console.log(p1.name)
console.log(p1.getName());

let p2 = {name:"John"}
console.log(p2.name);
20/08/23, 2:20 am - Ranjan: var name="ranjan"
var age=23

person = {name, age, city:"Chandigarh"}

console.log(person)
20/08/23, 2:20 am - Ranjan: *Object literal*
20/08/23, 2:29 am - Ranjan: *map data type*
let map = new Map();

map.set("name", "ranjan");

console.log(map)
console.log(map.get("name"));
console.log(map.has("name"));

map.clear()
console.log(map)
// map.size()
20/08/23, 2:34 am - Ranjan: *set data type*

let set = new Set();

set.add(1)
set.add(2)
set.add(4)
set.add(1)
console.log(set);
console.log(set.size)
set.delete(2)
console.log(set);
console.log(set.size)
console.log(set.has(2))
set.clear()
console.log(set);
20/08/23, 2:59 am - Ranjan: *HIGHER ORDER FUNCTION*

let people = [
    {name:"Abhishek", age:23},
    {name:"rohit", age:32},
    {name:"Akash", age:27},
    {name:"Shipra", age:18},
    ]
    
let lowerAge = people.filter((person)=> person.age<25)
console.log(lowerAge)

let sum = people.reduce((total,p)=> total+p.age, 0);
let conName = people.reduce((st,p)=> st+ p.name, ""); 

console.log(sum);
console.log(conName);


// const cities = ["NY", "LA", "DC"]

// const low = cities.map((city)=> city.toLowerCase())
// console.log(low)

// const ages = [20, 10, 30, 32, 40]
// const greatAge = ages.filter((age)=> age>25)
// console.log(greatAge)
20/08/23, 3:09 am - Ranjan: *export* is used to export multiple named values from a module.
*export default* is used to export a single default value from a module.
20/08/23, 3:21 am - Ranjan: *getter / setter in JS*
20/08/23, 3:21 am - Ranjan: const person = {
    firstName:"John",
    secondName:"Smith",
    
    get fullName(){
        return this.firstName+' '+this.secondName
    },
    
    set fullName(name){
        
        this.firstName = name.split(' ')[0]; 
        this.secondName = name.split(' ')[1]; 
        
    }
}

person.fullNmae = "Abhishek Ranjan"

console.log(person);
console.log(person.fullName);
20/08/23, 6:54 am - Ranjan: *Asynchronous*
let pizza
function orderPizza(){
    console.log('Order pizza')
    setTimeout(() => {  // setTimeout is asyncronous task
      pizza ='🍕'
      console.log(`${pizza} is ready`)
    }, 10000)
    console.log('Pizza was ordered')
}

orderPizza()
console.log('Call ranjan')
console.log(`Eat ${pizza}`)
20/08/23, 7:03 am - Ranjan: *Callback*
// function orderPizza(ready){
//     setTimeout(() => {
//          const pizza ='🍕'
//         ready(pizza);
        
//     },2000)
// }
function orderPizza(callback){
    setTimeout(() => {
         const pizza ='🍕'
        callback(pizza);
        
    },2000)
}

function pizzaReady(pizza){
 console.log(`Eat the ${pizza}`)
}

orderPizza(pizzaReady)
console.log(`call ranjan`
20/08/23, 7:12 am - Ranjan: *callback hell*
function thing1(callback){
    //Call the pizza shop
    callback()
    
}
function thing2(callback){
    //Order the pizza 
    callback()
}
function thing3(ca){
    //Eat the pizza 
    
}

thing1(()=>{
    thing2(()=>{
        thing3()
    })
})
20/08/23, 7:14 am - Ranjan: IMG-20230820-WA0000.jpg (file attached)

